{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/index.jsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","createContext","StyledMainWrapper","styled","main","props","theme","space","_48px","_32px","width","max","normal","StyledArticle","Link","_24px","pageQuery","posts","data","allMarkdownRemark","edges","Base","filter","post","node","frontmatter","title","length","map","key","id","to","path","date","excerpt","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"oKAcyBA,QAAOC,QAELC,IAAMC,cAAc,I,4BChB/C,0CAOA,IAAMC,EAAoBC,IAAOC,KAAV,+EAAGD,CAAH,4DAEV,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,MAAMC,SAAS,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,MAAME,SAC7D,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,MAAMC,OAC/B,SAAAN,GAAK,OAAIA,EAAMC,MAAMI,MAAME,UAGhCC,EAAgBV,YAAOW,KAAV,2EAAGX,CAAH,+DAEH,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,MAAMQ,SA6B9BC,GAtBE,sBAAe,IACbC,EADY,EAAXC,KACcC,kBAAtBC,MAER,OACE,kBAACC,EAAA,EAAD,KACE,kBAACnB,EAAD,KACGe,EACEK,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,MAAMC,OAAS,KACpDC,KAAI,YAAqB,IAAZL,EAAW,EAAjBC,KACN,OACE,kBAACX,EAAD,CAAegB,IAAKN,EAAKO,GAAIC,GAAIR,EAAKE,YAAYO,MAChD,4BAAKT,EAAKE,YAAYC,OACtB,2BAAIH,EAAKE,YAAYQ,MACrB,2BAAIV,EAAKW,gBASH,e,qBC7CtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGE1C,IAAM2C,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-jsx-abc82d24f495625addfe.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n// import { Helmet } from 'react-helmet'\nimport styled from 'styled-components'\n\nimport Base from '../components/layouts/Base'\n\nconst StyledMainWrapper = styled.main`\n  margin: 0 auto;\n  padding: ${props => props.theme.space._48px} ${props => props.theme.space._32px};\n  max-width: ${props => props.theme.width.max};\n  width: ${props => props.theme.width.normal};\n`\n\nconst StyledArticle = styled(Link)`\n  display: block;\n  margin-top: ${props => props.theme.space._24px};\n  &:first-child {\n    margin-top: 0;\n  }\n`\n\n// eslint-disable-next-line react/display-name\nexport default ({ data }) => {\n  const { edges: posts } = data.allMarkdownRemark\n\n  return (\n    <Base>\n      <StyledMainWrapper>\n        {posts\n          .filter(post => post.node.frontmatter.title.length > 0)\n          .map(({ node: post }) => {\n            return (\n              <StyledArticle key={post.id} to={post.frontmatter.path}>\n                <h1>{post.frontmatter.title}</h1>\n                <p>{post.frontmatter.date}</p>\n                <p>{post.excerpt}</p>\n              </StyledArticle>\n            )\n          })}\n      </StyledMainWrapper>\n    </Base>\n  )\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n          }\n        }\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}