{"componentChunkName":"component---src-templates-blog-post-index-jsx","path":"/blog/resolve_paths_with_ts-node/","result":{"data":{"markdownRemark":{"id":"7aa7068f-f668-5085-9e29-b4545c8f3d6f","html":"<p>どうも、フロントエンドエンジニアの<strong>おいなり</strong>です。</p>\n<p>今回はタイトルにある通り、<code class=\"language-text\">ts-node</code>を使って「tsconfig.json」の<code class=\"language-text\">paths</code>をちゃんと読み込ませるために必要な指定について書いています。</p>\n<p>というのも、最近自分で作っている『<a href=\"https://first-vue.tkcco21.me/\" target=\"_blank\" rel=\"noopener noreferrer\">First Vue</a>』のバックエンド側をTypeScriptに変えようとしたときにこの問題が発生しました。</p>\n<p>ただ、これがベストな方法なのか不明なので、わかる方ツイッターからでもご指摘ください！</p>\n<h2>Node.js + TypeScriptでエイリアスを指定する</h2>\n<p>まず前提として、TypeScriptで独自のエイリアスを指定するためには、「tsconfig.json」に下記のような記述をしなければいけません。</p>\n<p><code class=\"language-text\">tsc --init</code>のコマンドで「tsconfig.json」を生成した場合には、コメントとしてすでに記述されているので、それを有効にしましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Base directory to resolve non-absolute module names. */</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@Config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./config\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@Server/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./server/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">paths</code>を有効にするためには、<code class=\"language-text\">&quot;baseUrl&quot;: &quot;./&quot;,</code>の指定も必要です。</p>\n<p>そうすると、下記のようにパスの指定が可能になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> config <span class=\"token keyword\">from</span> <span class=\"token string\">'@Config'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> encrypt <span class=\"token keyword\">from</span> <span class=\"token string\">'@Server/utils/hash'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ただ、ここで<code class=\"language-text\">&quot;@Config&quot;: [&quot;./config&quot;]</code>と<code class=\"language-text\">&quot;@Server/*&quot;: [&quot;./server/*&quot;]</code>の指定の仕方が若干違うのですが、これは<code class=\"language-text\">/</code>つなぎで下層にあるファイルを指定できるかどうかの違いです。</p>\n<h2>ts-nodeを使うとエイリアスがエラーになる</h2>\n<p>開発時はコンパイルをせず、<code class=\"language-text\">ts-node</code>のようなものを使うこともあります。</p>\n<p>ただ、なぜか<code class=\"language-text\">ts-node</code>を使うと下記のような、エイリアスの「パスが解決ができません」というエラーが表示されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cannot find module &#39;@Server/../..&#39;</code></pre></div>\n<p>解決法としては<code class=\"language-text\">ts-node</code>を使うと、<code class=\"language-text\">tsconfig-paths</code>というnpmパッケージが必要みたいです。<br>\n『<a href=\"https://www.npmjs.com/package/tsconfig-paths\" target=\"_blank\" rel=\"noopener noreferrer\">tsconfig-paths</a>』</p>\n<p>なので、下記でインストールしましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -D tsconfig-paths</code></pre></div>\n<p>インストールが完了したら、下記のコマンドで対象ファイルの実行をすればちゃんとエイリアスを読み込めるようになります。<br>\n<code class=\"language-text\">./server/index.ts</code>は実行したいファイルを指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">ts-node -r tsconfig-paths/register ./server/index.ts</code></pre></div>\n<h2>ESLintやwebpackを使っている場合</h2>\n<p>ここまでで<code class=\"language-text\">ts-node</code>を使ったパスは一旦解決なんですが、補足としてESLintやwebpackを使っている場合の指定の方法を書きます。</p>\n<h3>webpackのエイリアス対応</h3>\n<p>「tsconfig.json」で<code class=\"language-text\">paths</code>で解決できたかと思いきや、webpackを使っている場合には「webpack.config.js」にもエイリアスの指定を書かなければいけません。</p>\n<p>「tsconfig.json」のときとはちょっと変わって、下記のように指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"@Config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./config\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"@Server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./server\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>ESLintのエイリアス対応</h3>\n<p>ESLintを使っていると、先ほどの設定がちゃんとできていてもエイリアスののパス解決がESLintでエラーになってします。<br>\nなので、下記のコマンドで必要なnpmパッケージをインストールしましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -D eslint-import-resolver-alias</code></pre></div>\n<p>インストールしたら、ESLintの設定ファイルに下記のように追記しましょう。例として、「.eslintrc」のファイル形式です。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .eslintrc</span>\n<span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> ... <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"import/resolver\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"map\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"@Config\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./config\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"@Server\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./server\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2>まとめ</h2>\n<p>いやー。エイリアスの指定だけでこんなに書かないといけないのは大変ですね。</p>\n<p>Node.jsとTypeScriptの開発で<code class=\"language-text\">ts-node</code>を使う場合には、<code class=\"language-text\">tsconfig-paths</code>をインストールしてコマンドにオプションとして指定します。</p>\n<p>また、ESLintやwebpackを使っているときには、さらにそれらの設定ファイルにエイリアスの指定をします。</p>\n<p>ちょっと面倒ではありますが、TypeScriptでの開発は恩恵のほうが多いと思うので、理解したいですね。</p>\n<p>以上ですー！！</p>","frontmatter":{"date":"March 07, 2020","path":"/resolve_paths_with_ts-node/","title":"ts-nodeを使ってtsconfigのpathsをちゃんと読み込ませる","excerpt":"ts-nodeを使ってバックエンドの開発をしているときに、tsconfigのpathsに指定したものがちゃんと読み込めなかったので、それをどう解消したかを書いています。"}}},"pageContext":{"slugPath":"/blog/resolve_paths_with_ts-node/","articleType":"blog"}}}